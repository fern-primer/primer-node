/**
 * This file auto-generated by Fern from our API Definition.
 */

import { PrimerApi } from "../../..";
import * as core from "../../../core";
import * as schemas from "../..";

export const ThreeDSecureReasonCode: core.schemas.Schema<
  ThreeDSecureReasonCode.Raw,
  PrimerApi.payments.ThreeDSecureReasonCode
> = core.schemas
  .union("type", {
    Skipped: core.schemas.object({
      value: core.schemas.lazy(() => schemas.payments.ThreeDSecureSkippedReasonCodeEnum),
    }),
    Failed: core.schemas.object({
      value: core.schemas.lazy(() => schemas.payments.ThreeDSecureFailedReasonCodeEnum),
    }),
  })
  .transform<PrimerApi.payments.ThreeDSecureReasonCode>({
    parse: (value) => {
      switch (value.type) {
        case "Skipped": {
          return PrimerApi.payments.ThreeDSecureReasonCode.skipped(value.value);
        }
        case "Failed": {
          return PrimerApi.payments.ThreeDSecureReasonCode.failed(value.value);
        }
        default: {
          return {
            ...(value as any),
            _visit: (visitor) => visitor._other(value),
          };
        }
      }
    },
    json: (value) => value as any,
  });

export declare namespace ThreeDSecureReasonCode {
  type Raw = ThreeDSecureReasonCode.Skipped | ThreeDSecureReasonCode.Failed;

  interface Skipped {
    type: "Skipped";
    value: schemas.payments.ThreeDSecureSkippedReasonCodeEnum.Raw;
  }

  interface Failed {
    type: "Failed";
    value: schemas.payments.ThreeDSecureFailedReasonCodeEnum.Raw;
  }
}
