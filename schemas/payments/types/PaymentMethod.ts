/**
 * This file auto-generated by Fern from our API Definition.
 */

import { PrimerApi } from "../../..";
import * as core from "../../../core";
import * as schemas from "../..";

export const PaymentMethod: core.schemas.Schema<PaymentMethod.Raw, PrimerApi.payments.PaymentMethod> = core.schemas
  .union("paymentMethodType", {
    PAYMENT_CARD: core.schemas.lazyObject(() => schemas.payments.PaymentCardSchema),
    PAYPAL_ORDER: core.schemas.lazyObject(() => schemas.payments.PayPalOrderSchema),
    PAYPAL_BILLING: core.schemas.lazyObject(() => schemas.payments.PayPalBillingAgreementSchema),
    GO_CARDLESS: core.schemas.lazyObject(() => schemas.payments.GoCardlessMandateSchema),
    KLARNA_PAYMENT_SESSION: core.schemas.lazyObject(() => schemas.payments.KlarnaPaymentSessionSchema),
    KLARNA_CUSTOMER_TOKEN: core.schemas.lazyObject(() => schemas.payments.KlarnaCustomerTokenSchema),
    IDEAL_PAY_NL_TOKEN: core.schemas.lazyObject(() => schemas.payments.IdealPayNLTokenSchema),
    APAYA_CUSTOMER_TOKEN: core.schemas.lazyObject(() => schemas.payments.ApayaCustomerTokenSchema),
  })
  .transform<PrimerApi.payments.PaymentMethod>({
    parse: (value) => {
      switch (value.paymentMethodType) {
        case "PAYMENT_CARD": {
          return PrimerApi.payments.PaymentMethod.paymentCard(value);
        }
        case "PAYPAL_ORDER": {
          return PrimerApi.payments.PaymentMethod.paypalOrder(value);
        }
        case "PAYPAL_BILLING": {
          return PrimerApi.payments.PaymentMethod.paypalBilling(value);
        }
        case "GO_CARDLESS": {
          return PrimerApi.payments.PaymentMethod.goCardless(value);
        }
        case "KLARNA_PAYMENT_SESSION": {
          return PrimerApi.payments.PaymentMethod.klarnaPaymentSession(value);
        }
        case "KLARNA_CUSTOMER_TOKEN": {
          return PrimerApi.payments.PaymentMethod.klarnaCustomerToken(value);
        }
        case "IDEAL_PAY_NL_TOKEN": {
          return PrimerApi.payments.PaymentMethod.idealPayNlToken(value);
        }
        case "APAYA_CUSTOMER_TOKEN": {
          return PrimerApi.payments.PaymentMethod.apayaCustomerToken(value);
        }
        default: {
          return {
            ...(value as any),
            _visit: (visitor) => visitor._other(value),
          };
        }
      }
    },
    json: (value) => value as any,
  });

export declare namespace PaymentMethod {
  type Raw =
    | PaymentMethod.PaymentCard
    | PaymentMethod.PaypalOrder
    | PaymentMethod.PaypalBilling
    | PaymentMethod.GoCardless
    | PaymentMethod.KlarnaPaymentSession
    | PaymentMethod.KlarnaCustomerToken
    | PaymentMethod.IdealPayNlToken
    | PaymentMethod.ApayaCustomerToken;

  interface PaymentCard extends schemas.payments.PaymentCardSchema.Raw {
    paymentMethodType: "PAYMENT_CARD";
  }

  interface PaypalOrder extends schemas.payments.PayPalOrderSchema.Raw {
    paymentMethodType: "PAYPAL_ORDER";
  }

  interface PaypalBilling extends schemas.payments.PayPalBillingAgreementSchema.Raw {
    paymentMethodType: "PAYPAL_BILLING";
  }

  interface GoCardless extends schemas.payments.GoCardlessMandateSchema.Raw {
    paymentMethodType: "GO_CARDLESS";
  }

  interface KlarnaPaymentSession extends schemas.payments.KlarnaPaymentSessionSchema.Raw {
    paymentMethodType: "KLARNA_PAYMENT_SESSION";
  }

  interface KlarnaCustomerToken extends schemas.payments.KlarnaCustomerTokenSchema.Raw {
    paymentMethodType: "KLARNA_CUSTOMER_TOKEN";
  }

  interface IdealPayNlToken extends schemas.payments.IdealPayNLTokenSchema.Raw {
    paymentMethodType: "IDEAL_PAY_NL_TOKEN";
  }

  interface ApayaCustomerToken extends schemas.payments.ApayaCustomerTokenSchema.Raw {
    paymentMethodType: "APAYA_CUSTOMER_TOKEN";
  }
}
