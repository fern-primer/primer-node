/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { PrimerApi } from "../../..";
import urlJoin from "url-join";
import * as schemas from "../../../schemas";

export interface Client {
  saveToken(request: PrimerApi.paymentMethod.saveToken.Request): Promise<PrimerApi.paymentMethod.saveToken.Response>;
  list(request: PrimerApi.paymentMethod.list.Request): Promise<PrimerApi.paymentMethod.list.Response>;
  delete(request: PrimerApi.paymentMethod.delete.Request): Promise<PrimerApi.paymentMethod.delete.Response>;
  updateDefault(
    request: PrimerApi.paymentMethod.updateDefault.Request
  ): Promise<PrimerApi.paymentMethod.updateDefault.Response>;
}

export declare namespace Client {
  interface Options {
    _origin: string;
    apiKey?: core.Supplier<string>;
  }
}

export class Client implements Client {
  constructor(private readonly options: Client.Options) {}

  public async saveToken(
    request: PrimerApi.paymentMethod.saveToken.Request
  ): Promise<PrimerApi.paymentMethod.saveToken.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/payment-instruments/${request.paymentMethodToken}/vault`),
      method: "POST",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: schemas.paymentMethod.SavePaymentMethodTokenRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.paymentMethod.PaymentMethodToken.parse(
          response.body as schemas.paymentMethod.PaymentMethodToken.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async list(request: PrimerApi.paymentMethod.list.Request): Promise<PrimerApi.paymentMethod.list.Response> {
    const queryParameters = new URLSearchParams();
    queryParameters.append("customer_id", request.customerId);
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, "/payment-instruments/"),
      method: "GET",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      queryParameters: queryParameters,
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.paymentMethod.ListPaymentMethodsResponse.parse(
          response.body as schemas.paymentMethod.ListPaymentMethodsResponse.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async delete(
    request: PrimerApi.paymentMethod.delete.Request
  ): Promise<PrimerApi.paymentMethod.delete.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/payment-instruments/${request.paymentMethodToken}`),
      method: "DELETE",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.paymentMethod.PaymentMethodToken.parse(
          response.body as schemas.paymentMethod.PaymentMethodToken.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async updateDefault(
    request: PrimerApi.paymentMethod.updateDefault.Request
  ): Promise<PrimerApi.paymentMethod.updateDefault.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, `/payment-instruments/${request.paymentMethodToken}/default`),
      method: "POST",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.paymentMethod.PaymentMethodToken.parse(
          response.body as schemas.paymentMethod.PaymentMethodToken.Raw
        ),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
