/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as core from "../../../core";
import { PrimerApi } from "../../..";
import urlJoin from "url-join";
import * as schemas from "../../../schemas";

export interface Client {
  create(request: PrimerApi.clientSession.CreateClientSessionRequest): Promise<PrimerApi.clientSession.create.Response>;
  get(request: PrimerApi.clientSession.get.Request): Promise<PrimerApi.clientSession.get.Response>;
  update(request: PrimerApi.clientSession.UpdateClientSessionRequest): Promise<PrimerApi.clientSession.update.Response>;
}

export declare namespace Client {
  interface Options {
    _origin: string;
    apiKey?: core.Supplier<string>;
  }
}

export class Client implements Client {
  constructor(private readonly options: Client.Options) {}

  public async create(
    request: PrimerApi.clientSession.CreateClientSessionRequest
  ): Promise<PrimerApi.clientSession.create.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, "/client-session/"),
      method: "POST",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: schemas.clientSession.CreateClientSessionRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.clientSession.ClientSession.parse(response.body as schemas.clientSession.ClientSession.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async get(request: PrimerApi.clientSession.get.Request): Promise<PrimerApi.clientSession.get.Response> {
    const queryParameters = new URLSearchParams();
    queryParameters.append("clientToken", request.clientToken);
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, "/client-session/"),
      method: "GET",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      queryParameters: queryParameters,
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.clientSession.ClientSession.parse(response.body as schemas.clientSession.ClientSession.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async update(
    request: PrimerApi.clientSession.UpdateClientSessionRequest
  ): Promise<PrimerApi.clientSession.update.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options._origin, "/client-session/"),
      method: "PATCH",
      headers: {
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: schemas.clientSession.UpdateClientSessionRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: schemas.clientSession.ClientSession.parse(response.body as schemas.clientSession.ClientSession.Raw),
      };
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
