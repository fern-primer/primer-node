/**
 * This file auto-generated by Fern from our API Definition.
 */

import { PrimerApi } from "../../..";

export type ThreeDSecureReasonCode =
  | ThreeDSecureReasonCode.Skipped
  | ThreeDSecureReasonCode.Failed
  | ThreeDSecureReasonCode._Unknown;

export declare namespace ThreeDSecureReasonCode {
  interface Skipped extends _Utils {
    type: "Skipped";
    value: PrimerApi.payments.ThreeDSecureSkippedReasonCodeEnum;
  }

  interface Failed extends _Utils {
    type: "Failed";
    value: PrimerApi.payments.ThreeDSecureFailedReasonCodeEnum;
  }

  interface _Unknown extends _Utils {
    type: void;
  }

  interface _Utils {
    _visit: <Result>(visitor: ThreeDSecureReasonCode._Visitor<Result>) => Result;
  }

  interface _Visitor<Result> {
    skipped: (value: PrimerApi.payments.ThreeDSecureSkippedReasonCodeEnum) => Result;
    failed: (value: PrimerApi.payments.ThreeDSecureFailedReasonCodeEnum) => Result;
    _other: (value: { type: string }) => Result;
  }
}

export const ThreeDSecureReasonCode = {
  skipped: (value: PrimerApi.payments.ThreeDSecureSkippedReasonCodeEnum): ThreeDSecureReasonCode.Skipped => {
    const valueWithoutVisit: Omit<ThreeDSecureReasonCode.Skipped, "_visit"> = {
      value: value,
      type: "Skipped",
    };
    Object.defineProperty(valueWithoutVisit, "_visit", {
      enumerable: false,
      writable: true,
    });
    const castedValue = valueWithoutVisit as ThreeDSecureReasonCode.Skipped;
    castedValue._visit = (visitor) => visitor.skipped(value);
    return castedValue;
  },

  failed: (value: PrimerApi.payments.ThreeDSecureFailedReasonCodeEnum): ThreeDSecureReasonCode.Failed => {
    const valueWithoutVisit: Omit<ThreeDSecureReasonCode.Failed, "_visit"> = {
      value: value,
      type: "Failed",
    };
    Object.defineProperty(valueWithoutVisit, "_visit", {
      enumerable: false,
      writable: true,
    });
    const castedValue = valueWithoutVisit as ThreeDSecureReasonCode.Failed;
    castedValue._visit = (visitor) => visitor.failed(value);
    return castedValue;
  },
} as const;
