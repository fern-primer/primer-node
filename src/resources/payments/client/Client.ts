/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { PrimerPrimerApi } from "@fern-api/primer";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    apiKey?: core.Supplier<string>;
    apiVersion: string;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async search(request?: PrimerPrimerApi.GetPaymentsList): Promise<PrimerPrimerApi.payments.search.Response> {
    const _queryParams = new URLSearchParams();
    if (request?.status != null) {
      _queryParams.append("status", request?.status);
    }

    if (request?.paymentMethodType != null) {
      _queryParams.append("payment_method_type", request?.paymentMethodType);
    }

    if (request?.processor != null) {
      _queryParams.append("processor", request?.processor);
    }

    if (request?.currencyCode != null) {
      _queryParams.append("currency_code", request?.currencyCode);
    }

    if (request?.fromDate != null) {
      _queryParams.append("from_date", request?.fromDate.toISOString());
    }

    if (request?.toDate != null) {
      _queryParams.append("to_date", request?.toDate.toISOString());
    }

    if (request?.orderId != null) {
      _queryParams.append("order_id", request?.orderId);
    }

    if (request?.minAmount != null) {
      _queryParams.append("min_amount", request?.minAmount.toString());
    }

    if (request?.maxAmount != null) {
      _queryParams.append("max_amount", request?.maxAmount.toString());
    }

    if (request?.customerId != null) {
      _queryParams.append("customer_id", request?.customerId);
    }

    if (request?.merchantId != null) {
      _queryParams.append("merchant_id", request?.merchantId);
    }

    if (request?.customerEmailAddress != null) {
      _queryParams.append("customer_email_address", request?.customerEmailAddress);
    }

    if (request?.last4Digits != null) {
      _queryParams.append("last_4_digits", request?.last4Digits);
    }

    if (request?.paypalEmail != null) {
      _queryParams.append("paypal_email", request?.paypalEmail);
    }

    if (request?.klarnaEmail != null) {
      _queryParams.append("klarna_email", request?.klarnaEmail);
    }

    if (request?.limit != null) {
      _queryParams.append("limit", request?.limit.toString());
    }

    if (request?.cursor != null) {
      _queryParams.append("cursor", request?.cursor.toString());
    }

    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/payments/"),
      method: "GET",
      headers: {
        "X-Idempotency-Key": request?.idempotencyKey,
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      queryParameters: _queryParams,
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.search.Response.parse(
          _response.body as serializers.payments.search.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.search.Error._unknown(_response.error),
    };
  }

  public async create(
    request: PrimerPrimerApi.CreatePaymentRequest
  ): Promise<PrimerPrimerApi.payments.create.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/payments/"),
      method: "POST",
      headers: {
        "X-Idempotency-Key": request.idempotencyKey,
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.payments.create.Request.json({
        orderId: request.orderId,
        currencyCode: request.currencyCode,
        amount: request.amount,
        order: request.order,
        paymentMethodToken: request.paymentMethodToken,
        customerId: request.customerId,
        customer: request.customer,
        metadata: request.metadata,
        paymentMethod: request.paymentMethod,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.create.Response.parse(
          _response.body as serializers.payments.create.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.create.Error._unknown(_response.error),
    };
  }

  public async capture(
    id: PrimerPrimerApi.PaymentId,
    request?: PrimerPrimerApi.CapturePaymentRequest
  ): Promise<PrimerPrimerApi.payments.capture.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/payments/${id}/capture`),
      method: "POST",
      headers: {
        "X-Idempotency-Key": request?.idempotencyKey,
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.payments.capture.Request.json({
        amount: request?.amount,
        final: request?.final,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.capture.Response.parse(
          _response.body as serializers.payments.capture.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.capture.Error._unknown(_response.error),
    };
  }

  public async cancel(
    id: PrimerPrimerApi.PaymentId,
    request?: PrimerPrimerApi.CancelPaymentRequest
  ): Promise<PrimerPrimerApi.payments.cancel.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/payments/${id}/cancel`),
      method: "POST",
      headers: {
        "X-Idempotency-Key": request?.idempotencyKey,
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.payments.cancel.Request.json({
        reason: request?.reason,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.cancel.Response.parse(
          _response.body as serializers.payments.cancel.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.cancel.Error._unknown(_response.error),
    };
  }

  public async refund(
    id: PrimerPrimerApi.PaymentId,
    request?: PrimerPrimerApi.RefundPaymentRequest
  ): Promise<PrimerPrimerApi.payments.refund.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/payments/${id}/refund`),
      method: "POST",
      headers: {
        "X-Idempotency-Key": request?.idempotencyKey,
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.payments.refund.Request.json({
        amount: request?.amount,
        orderId: request?.orderId,
        reason: request?.reason,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.refund.Response.parse(
          _response.body as serializers.payments.refund.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.refund.Error._unknown(_response.error),
    };
  }

  public async resume(
    id: PrimerPrimerApi.PaymentId,
    request: PrimerPrimerApi.ResumePaymentRequest
  ): Promise<PrimerPrimerApi.payments.resume.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/payments/${id}/resume`),
      method: "POST",
      headers: {
        "X-Idempotency-Key": request.idempotencyKey,
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.payments.resume.Request.json({
        resumeToken: request.resumeToken,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.resume.Response.parse(
          _response.body as serializers.payments.resume.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.resume.Error._unknown(_response.error),
    };
  }

  public async get(id: PrimerPrimerApi.PaymentId): Promise<PrimerPrimerApi.payments.get.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, `/payments/${id}/resume`),
      method: "GET",
      headers: {
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.payments.get.Response.parse(_response.body as serializers.payments.get.Response.Raw),
      };
    }

    return {
      ok: false,
      error: PrimerPrimerApi.payments.get.Error._unknown(_response.error),
    };
  }
}
