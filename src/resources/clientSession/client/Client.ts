/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import * as core from "../../../core";
import { PrimerPrimerApi } from "@fern-api/primer";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
    apiKey?: core.Supplier<string>;
    apiVersion: string;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async create(
    request?: PrimerPrimerApi.CreateClientSessionRequest
  ): Promise<PrimerPrimerApi.clientSession.create.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/client-session/"),
      method: "POST",
      headers: {
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.clientSession.create.Request.json({
        orderId: request?.orderId,
        currencyCode: request?.currencyCode,
        amount: request?.amount,
        order: request?.order,
        customerId: request?.customerId,
        customer: request?.customer,
        metadata: request?.metadata,
        paymentMethod: request?.paymentMethod,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.clientSession.create.Response.parse(
          _response.body as serializers.clientSession.create.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: PrimerPrimerApi.clientSession.create.Error.clientSessionValidationError(
              await serializers.ClientSessionValidationError.parse(
                _response.error.body as serializers.ClientSessionValidationError.Raw
              )
            ),
          };
        case 422:
          return {
            ok: false,
            error: PrimerPrimerApi.clientSession.create.Error.requestValidationError(
              await serializers.RequestValidationError.parse(
                _response.error.body as serializers.RequestValidationError.Raw
              )
            ),
          };
      }
    }

    return {
      ok: false,
      error: PrimerPrimerApi.clientSession.create.Error._unknown(_response.error),
    };
  }

  public async get(
    request: PrimerPrimerApi.GetClientSessionRequest
  ): Promise<PrimerPrimerApi.clientSession.get.Response> {
    const _queryParams = new URLSearchParams();
    _queryParams.append("clientToken", request.clientToken);
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/client-session/"),
      method: "GET",
      headers: {
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      queryParameters: _queryParams,
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.clientSession.get.Response.parse(
          _response.body as serializers.clientSession.get.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: PrimerPrimerApi.clientSession.get.Error.clientSessionValidationError(
              await serializers.ClientSessionValidationError.parse(
                _response.error.body as serializers.ClientSessionValidationError.Raw
              )
            ),
          };
        case 422:
          return {
            ok: false,
            error: PrimerPrimerApi.clientSession.get.Error.requestValidationError(
              await serializers.RequestValidationError.parse(
                _response.error.body as serializers.RequestValidationError.Raw
              )
            ),
          };
      }
    }

    return {
      ok: false,
      error: PrimerPrimerApi.clientSession.get.Error._unknown(_response.error),
    };
  }

  public async update(
    request?: PrimerPrimerApi.UpdateClientSessionRequest
  ): Promise<PrimerPrimerApi.clientSession.update.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Production, "/client-session/"),
      method: "PATCH",
      headers: {
        "X-API-VERSION": this.options.apiVersion,
        "X-API-KEY": await core.Supplier.get(this.options.apiKey),
      },
      body: await serializers.clientSession.update.Request.json({
        clientToken: request?.clientToken,
        customerId: request?.customerId,
        orderId: request?.orderId,
        currencyCode: request?.currencyCode,
        amount: request?.amount,
        order: request?.order,
        customer: request?.customer,
        metadata: request?.metadata,
        paymentMethod: request?.paymentMethod,
      }),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.clientSession.update.Response.parse(
          _response.body as serializers.clientSession.update.Response.Raw
        ),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 400:
          return {
            ok: false,
            error: PrimerPrimerApi.clientSession.update.Error.clientSessionValidationError(
              await serializers.ClientSessionValidationError.parse(
                _response.error.body as serializers.ClientSessionValidationError.Raw
              )
            ),
          };
        case 422:
          return {
            ok: false,
            error: PrimerPrimerApi.clientSession.update.Error.requestValidationError(
              await serializers.RequestValidationError.parse(
                _response.error.body as serializers.RequestValidationError.Raw
              )
            ),
          };
      }
    }

    return {
      ok: false,
      error: PrimerPrimerApi.clientSession.update.Error._unknown(_response.error),
    };
  }
}
