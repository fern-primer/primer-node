/**
 * This file auto-generated by Fern from our API Definition.
 */

import { PrimerApi } from "../../..";
import * as core from "../../../core";
import * as serializers from "../..";

export const ClientPaymentMethod: core.schemas.ObjectSchema<
  ClientPaymentMethod.Raw,
  PrimerApi.clientSession.ClientPaymentMethod
> = core.schemas.object({
  vaultOnSuccess: core.schemas.boolean().optional(),
  descriptor: core.schemas.string().optional(),
  paymentType: core.schemas.lazy(() => serializers.clientSession.PaymentType).optional(),
  options: core.schemas
    .record(
      core.schemas.string(),
      core.schemas.lazyObject(() => serializers.clientSession.NetworkOrSurchargeObject)
    )
    .optional(),
});

export declare namespace ClientPaymentMethod {
  interface Raw {
    vaultOnSuccess?: boolean | null;
    descriptor?: string | null;
    paymentType?: serializers.clientSession.PaymentType.Raw | null;
    options?: Record<
      serializers.commons.SupportedPaymentMethods.Raw,
      serializers.clientSession.NetworkOrSurchargeObject.Raw
    > | null;
  }
}
