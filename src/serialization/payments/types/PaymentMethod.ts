/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { PrimerPrimerApi } from "@fern-api/primer";
import * as core from "../../../core";

export const PaymentMethod: core.schemas.Schema<serializers.PaymentMethod.Raw, PrimerPrimerApi.PaymentMethod> =
  core.schemas
    .union("paymentMethodType", {
      PAYMENT_CARD: core.schemas.lazyObject(async () => (await import("../..")).PaymentCardSchema),
      PAYPAL_ORDER: core.schemas.lazyObject(async () => (await import("../..")).PayPalOrderSchema),
      PAYPAL_BILLING: core.schemas.lazyObject(async () => (await import("../..")).PayPalBillingAgreementSchema),
      GO_CARDLESS: core.schemas.lazyObject(async () => (await import("../..")).GoCardlessMandateSchema),
      KLARNA_PAYMENT_SESSION: core.schemas.lazyObject(async () => (await import("../..")).KlarnaPaymentSessionSchema),
      KLARNA_CUSTOMER_TOKEN: core.schemas.lazyObject(async () => (await import("../..")).KlarnaCustomerTokenSchema),
      IDEAL_PAY_NL_TOKEN: core.schemas.lazyObject(async () => (await import("../..")).IdealPayNlTokenSchema),
      APAYA_CUSTOMER_TOKEN: core.schemas.lazyObject(async () => (await import("../..")).ApayaCustomerTokenSchema),
    })
    .transform<PrimerPrimerApi.PaymentMethod>({
      parse: (value) => {
        switch (value.paymentMethodType) {
          case "PAYMENT_CARD":
            return PrimerPrimerApi.PaymentMethod.paymentCard(value);
          case "PAYPAL_ORDER":
            return PrimerPrimerApi.PaymentMethod.paypalOrder(value);
          case "PAYPAL_BILLING":
            return PrimerPrimerApi.PaymentMethod.paypalBilling(value);
          case "GO_CARDLESS":
            return PrimerPrimerApi.PaymentMethod.goCardless(value);
          case "KLARNA_PAYMENT_SESSION":
            return PrimerPrimerApi.PaymentMethod.klarnaPaymentSession(value);
          case "KLARNA_CUSTOMER_TOKEN":
            return PrimerPrimerApi.PaymentMethod.klarnaCustomerToken(value);
          case "IDEAL_PAY_NL_TOKEN":
            return PrimerPrimerApi.PaymentMethod.idealPayNlToken(value);
          case "APAYA_CUSTOMER_TOKEN":
            return PrimerPrimerApi.PaymentMethod.apayaCustomerToken(value);
          default:
            return PrimerPrimerApi.PaymentMethod._unknown(value);
        }
      },
      json: (value) => value as any,
    });

export declare namespace PaymentMethod {
  type Raw =
    | PaymentMethod.PaymentCard
    | PaymentMethod.PaypalOrder
    | PaymentMethod.PaypalBilling
    | PaymentMethod.GoCardless
    | PaymentMethod.KlarnaPaymentSession
    | PaymentMethod.KlarnaCustomerToken
    | PaymentMethod.IdealPayNlToken
    | PaymentMethod.ApayaCustomerToken;

  interface PaymentCard extends serializers.PaymentCardSchema.Raw {
    paymentMethodType: "PAYMENT_CARD";
  }

  interface PaypalOrder extends serializers.PayPalOrderSchema.Raw {
    paymentMethodType: "PAYPAL_ORDER";
  }

  interface PaypalBilling extends serializers.PayPalBillingAgreementSchema.Raw {
    paymentMethodType: "PAYPAL_BILLING";
  }

  interface GoCardless extends serializers.GoCardlessMandateSchema.Raw {
    paymentMethodType: "GO_CARDLESS";
  }

  interface KlarnaPaymentSession extends serializers.KlarnaPaymentSessionSchema.Raw {
    paymentMethodType: "KLARNA_PAYMENT_SESSION";
  }

  interface KlarnaCustomerToken extends serializers.KlarnaCustomerTokenSchema.Raw {
    paymentMethodType: "KLARNA_CUSTOMER_TOKEN";
  }

  interface IdealPayNlToken extends serializers.IdealPayNlTokenSchema.Raw {
    paymentMethodType: "IDEAL_PAY_NL_TOKEN";
  }

  interface ApayaCustomerToken extends serializers.ApayaCustomerTokenSchema.Raw {
    paymentMethodType: "APAYA_CUSTOMER_TOKEN";
  }
}
