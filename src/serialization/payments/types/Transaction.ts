/**
 * This file auto-generated by Fern from our API Definition.
 */

import { PrimerApi } from "../../..";
import * as core from "../../../core";
import * as serializers from "../..";

export const Transaction: core.schemas.ObjectSchema<Transaction.Raw, PrimerApi.payments.Transaction> =
  core.schemas.object({
    date: core.schemas.string(),
    amount: core.schemas.number(),
    currencyCode: core.schemas.lazy(() => serializers.commons.CurrencyCode),
    type: core.schemas.lazy(() => serializers.payments.TransactionType).optional(),
    processorTransactionId: core.schemas.string().optional(),
    processorName: core.schemas.string().optional(),
    processorMerchantId: core.schemas.string(),
    processorStatus: core.schemas.lazy(() => serializers.payments.PaymentStatus).optional(),
    processorStatusReason: core.schemas.lazyObject(() => serializers.payments.PaymentProcessorError).optional(),
  });

export declare namespace Transaction {
  interface Raw {
    date: string;
    amount: number;
    currencyCode: serializers.commons.CurrencyCode.Raw;
    type?: serializers.payments.TransactionType.Raw | null;
    processorTransactionId?: string | null;
    processorName?: string | null;
    processorMerchantId: string;
    processorStatus?: serializers.payments.PaymentStatus.Raw | null;
    processorStatusReason?: serializers.payments.PaymentProcessorError.Raw | null;
  }
}
